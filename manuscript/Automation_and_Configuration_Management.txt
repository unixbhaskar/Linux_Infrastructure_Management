# Automation and Configuration Management
This is kinda core part of infrastructure management in any form. Sooner or later time will come ,when you wanted few things to be get done automatically, without much supervision. Specially when the infrastructure is growing and complexity arise. We basically want to eliminate things which are redundant to operate. Because we need to concentrate on more volatile thing within the infra more closely.

I know cron job do fine and most of the time is sufficient enough to get thing done, but beyond certain point ,we need to consider how to enhance and get thing done in proper manner. Writing tools to do the job done was the norm in open system management ,because it will allow you to do so, a rich set of inbuilt tools are come along with it. I wrote and still do write whenever I got chance to enhance. But having said that, the modern SCM (Software Configuration Managers) are quite smart (and I haven't had hands on thing with cfengine..heck), everything else is modern ,even chef. I have had done few things with puppet and salt .Like both of them .Both has pros and cons, like other softwares. And mind you, it does require some steep learning curve, but it will be all worth, if you spend enough time to get the gory details of it or how it works internally. Most of the shops, even the cloud based projects are heavily  lean on it, because they understand the importance and flexibility  it brings onto the table. You can attend and achieve so many things with minimal fuss and rigor. While you need to be cautious at times, to monitor it that it is doing the right job, what was intended. CI (Jenkins et al) can be your friend.

Puppet is written in ruby and very flexible, purely using OOPS concepts inside it. The noticeable downside would be slow nature of work/processing. On the other hand, Saltstack is written in python, and quite flexible and extensible too. And performance wise it will probably beat puppet. That is python's ability to interpret quickly. Anyway, you can choose whatever is your cup of tea,or the best bet for the particular environment. Now ,a little catch, I should warn, you need to be very conversant with those or have personnel at your disposal to do the job and troubleshooting if something goes wrong (sometime it will certainly). So, you been exposed to the system or the personnel exposed to those system have to have much more insight to get things back in track.

I would propose ,designate only those personnel involve in it, those who have inclination towards it,but not to someone who wanted thing done by it. As I said earlier it needs little bit steep learning curve and understanding of internals too. Not everybody has that kind of inclination towards it. You need to identify the resource from your team, or budget permit hire only those who are deep into it.

There are plenty SCM around free and proprietary. To name, Ansible is used in quite a few places and I heard it is done the job well (Again I do not have hands on with it). Anyway we need to consider the different aspect of the infrastructure requirement. What the present condition is? how it is operating? How it accomplish the work done?Once we get clear cut answer for those, then we can proceed to selecting the tool. Moreover ,we need to evaluate the tool before we recommend to the "Black Suit" wearing guy .He might come up with something which might caught us off guard. So, try not to be in that position, get as much details about the product as possible. It will surely help if you have some use cases under your sleeves.  And it would be wonderful if we can make some use case relate to the present environment with that tool.

People in general don't like changes ,but we are trying to do thing which will change the way environment operate and perform. And we are trying to get the best out of it with some more effort. Not necessary all the time we come out winner, but we can make an effort that we can be winner most of the time. The prime effect would be two: one ,technology will win and we get boosts in our confidence and feel valued, which is very crucial and important aspect of infrastructure professional. I have had seen and realized myself that once you feel truly valued in some setup ,you can do better and helping out better with less conflict and ego. Now ,you are in position to do more and take more responsibility.

And yes, mentoring the other person next to you, will have long lasting effect .I am not sure how that can be done, because different people use different strategy to get along. To me, I am very open and straight to everyone, few don't like, but they come to terms when they spend some time with me. Yep, that's I am. I believe being genuine to everyone is key, they feel confident about you. I have seen few incompetent to play foul to save their arse and make thing looks rosy. If you sense it ,bust it on the but.

Say, we want to change the configure file of fleet of web server farm, and that consists of 350 servers. Doing that by hand would be ridiculous (assuming similar kind of changes has to be made to all the servers) and time consuming and error prone too. So, to eliminate those cons we need to take advantage of SCM exposed to us. It just a matter of writing once and run everywhere thing .Means, you need to define in one place and agents will in from the master server/servers to get it sync in quick time. Pretty neat and effortless (thinking in terms of writing a manual script and invoking it). And likewise you can withdraw your applied changes in almost no time.So it is big time and effort saver. Most of enterprise including cloud premier operator embrace this kind of SCM to make their fleet of servers to get particular service in specific time.

I believe all the SCM provider including puppet and Saltstack has plethora of modules available for ready to use. Just get them from the internet and modify it according your requirement. Those are all templet file  and few of them are really smart to assume the requirement too (specifically dependency related). Now, it is making our life easy and more productive. We get more chance to actually lean on the problem then thinking of something else. It is a boon to have that kind of software available for infrastructure management. And you can do many many different task accomplish with it, with minimal fuss. I believe the syntax are pretty clear and precise, thanks to the pain taken by those authors to make life easy for others.

I have had seen people in the infrastructure management doing automation for the sake of doing it. Why? there are plenty of reason, notably to show the vertical that they can do better job and "quality" jobs; expertise in that skill, in turn trying to say "elevate me" kinda statement. Most of those folks get the recipe from internet (mostly from unverified source, how do you verify that?) and plain modification. I have had seen they are not even bothering to see checksum of the download. If something creeps in ,the entire infrastructure will be at stake. And also the poor practices of doing thing (yeah, I know same result can be achieved from different way..), but certainly not in efficient way. There must be a properly and efficient way of handling it, for that before implementing that ,lot of test has to be made. Most of the time and infrastructure missing those guidelines. Let me give you a example of this kind of practice. I was in with big name ,but they are trying to get a foot hole in IT, and got a non IT client. So, they have hired me for do certain job. Now ,while in that setup I have seen people use very poor practices on open system. Instead of using key-exchange, they are using "sshpass"!!

The biggest problem here, the whole set rarely read the man page, instead they are heavily relied on google. And they might have seen it some verified  blogs and use that and nobody crosschecking. Now, if they are good enough they might have glean on the man page before doing all the nonsense. Let me give you an excerpt from the man page itself..

```
SECURITY CONSIDERATIONS

   First  and  foremost, users of sshpass should realize that ssh's insistance on only getting the password interactively is not without reason. It is close to impossible to securely store the password, and users of sshpass should consider whether ssh's public key authentication provides the same  end-user  experience, while involving less hassle and being more secure.

  The  -p  option  should be considered the least secure of all of sshpass's options.  All system users can see the password in the command line with a simple "ps" command. Sshpass makes a minimal attempt to hide the password, but such attempts are doomed to create race conditions  without actually  solving  the problem. Users of sshpass are encouraged to use one of the other password passing techniques, which are all more secure.

   In  particular,  people  writing  programs  that  are meant to communicate the password programatically are encouraged to use an anonymous pipe and pass the pipe's reading end to sshpass using the -d option.

```
So, you can see the heads up right? Does the environment had got some sort of binding to some sort of compliance to prohibit key-exchange? No. They just simply failed to realized the importance of it. See, the little things make hell lot of difference.

Because I did open source development and install tweak many many thousand of software ,so I have had the habit of reading the README or DOCUMENTATION file before I started to do anything with the software. It is always a good habit to read the important information beforehand and then jump onto it. It's help certainly. So ,getting into that habit need sometime spend with it. Nowadays ,most people are so accustomed with search engine ,that they forgot the habit of reading the crucial piece. Because whenever they are in doubt ,they just use the search engine to find the answer, I too do,but very very limited cases ,not all the time, plus in very few specific places.
